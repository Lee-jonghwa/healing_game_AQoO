pipeline {
    agent any

    environment {
        // Docker 이미지 이름 (빌드 후, 해당 이미지를 사용하여 배포)
        DOCKER_IMAGE = "s12-webmobile1-sub1/s12p11e203:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                // GitLab에서 코드를 체크아웃 (Jenkinsfile은 backend 폴더 내에 위치했다고 가정)
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}"
                    // Dockerfile은 backend/aqoo 폴더에 있으므로 해당 디렉토리에서 빌드
                    dir('backend/aqoo') {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo "Running tests..."
                // 필요 시 테스트 명령어를 추가 (예: 단위 테스트, 통합 테스트 등)
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    // 기존 컨테이너(myapp)가 있으면 중지 및 삭제
                    sh "docker stop myapp || true"
                    sh "docker rm myapp || true"
                    
                    withCredentials([file(credentialsId: 'backend-env-file', variable: 'DEPLOY_ENV_FILE')]) {
                        // Jenkins 작업공간 내에 쓰기 권한이 보장되는 디렉토리(tmp)를 생성합니다.
                        sh "mkdir -p ${WORKSPACE}/tmp"
                        // Secret File을 tmp 디렉토리로 복사
                        sh "cp ${DEPLOY_ENV_FILE} ${WORKSPACE}/tmp/deploy.env"
                        echo ".env file copied to ${WORKSPACE}/tmp/deploy.env"
                        
                        // 배포: 새 컨테이너를 실행하면서 --env-file 옵션을 사용해 환경변수를 주입합니다.
                        sh """
                        docker run -d \
                        --name myapp \
                        -p 80:8080 \
                        --env-file ${WORKSPACE}/tmp/deploy.env \
                        ${DOCKER_IMAGE}
                        """
                    }
                }
            }
}

    }
    
    post {
        always {
            echo "Pipeline completed."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}

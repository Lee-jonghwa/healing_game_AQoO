백엔드 기술 스택

프레임워크
- Spring Boot

빌드도구
- Gradle:
- 프로젝트가 크거나 빌드 시간이 중요하다면 Gradle이 적합.
- 특히 클라우드 기반 애플리케이션에서 Gradle의 속도와 유연성이 더 유리.

AI 모션인식
- Mediapipe + TensorFlow.js:
- 브라우저 기반에서 실시간 모션 인식 가능.
- 높은 정확도와 빠른 속도로 사용자 경험 강화.
- 무료로 제공되는 미리 학습된 모델 활용 가능.

소켓 통신(실시간 채팅 , 알림)
- Spring WebSocket + STOMP (일반적인 경우)
- Netty로 대체 가능( 대규모 트래픽 시)
1. 모든 채팅방 리스트 조회, 새채팅방 생성 - Mysql
2. 채팅방 ID를 통해 해당 채팅방에 기록된 채팅 메시지 리스트 조회 - MongoDB
3. 채팅 메시지 전송에 따른, 메시지 DB에 저장(STOMP, MongoDB)

WEB-RTC
- OpenVidu
- Coturn (TURN/STUN 서버 - OpenVidu 기본 포함)

DB 기술
- Mysql
- (선택) MongoDB (비정형 데이터 저장시) - 채팅 내용 만
- (선택) Redis (사용자 데이터 및 세션 메타데이터 저장)

인프라: AWS EC2
    - 소규모 트래픽을 감당하기에 충분하고, 초기 설정이 비교적 단순
    - 실무에서도 많이 사용되는 클라우드 서비스로서 경험 축적에 유리
    - SSH를 통해 직접 접근 가능하고, Jenkins나 Docker Compose 등 필요한 도구들을 유연하게 설치 가능

아키텍처: Docker Compose
선정 이유
    - 개발/운영 환경 일치: Docker를 통해 의존성 문제가 줄어들고, 팀원 간 환경 통일이 쉬움
    - 간단한 멀티 컨테이너 구성: DB, 백엔드(Spring Boot), 프론트(React) 등이 각각 컨테이너로 분리 가능
    - 쿠버네티스(Kubernetes)나 ECS보다 **설정이 간단**하여 소규모 프로젝트에 적합

CI/CD: Jenkins

선정 이유
    - 오픈소스 CI/CD의 대표 주자: 플러그인 생태계가 풍부하고, 실무에서도 여전히 많이 사용
    - 커스터마이징 자유도가 높고, 다양한 SCM, 빌드 도구, 배포 전략과 연동 쉬움
    - 자체 서버(EC2)에 설치해 독립적으로 운영 가능 → 내부 네트워크에서 배포 수행
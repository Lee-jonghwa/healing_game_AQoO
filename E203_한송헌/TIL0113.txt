# TIL 2025.01.03

## Docker - EC2를 이용한 배포 방법

Jenkins, Docker, AWS를 모두 사용하여 배포하는 방법은 현재 가장 일반적인 배포 방법 중 하나입니다. 이 세 가지 기술을 결합하는 이유는 자동화, 이식성, 확장성 및 유지보수성을 제공하기 때문입니다. 다양한 기업들이 이 방식으로 프로젝트를 배포하고 있으며, 특히 CI/CD 파이프라인을 구축하고 클라우드 환경에서의 배포 자동화를 원할 때 주로 사용됩니다.

1. Jenkins - CI/CD 자동화
Jenkins는 **지속적 통합(CI)**과 **지속적 배포(CD)**를 위한 자동화 도구로 가장 널리 사용되는 오픈 소스 도구입니다. Jenkins는 코드를 Git 등의 버전 관리 시스템에서 가져오고, 이를 자동으로 빌드, 테스트, 배포하는 역할을 합니다.

- CI: 개발자가 코드를 Git에 푸시할 때마다 Jenkins가 자동으로 빌드를 실행하고, 테스트를 수행하여 코드 품질을 확인합니다.
- CD: Jenkins는 애플리케이션을 프로덕션 환경에 자동으로 배포하는 파이프라인을 관리합니다. Jenkins는 배포 과정의 수동 개입 없이 자동화된 배포를 가능하게 합니다.

2. Docker - 애플리케이션 컨테이너화
Docker는 애플리케이션과 그 종속성을 포함한 컨테이너 이미지를 생성하여, 이식성과 일관성을 제공합니다. Docker를 사용하면 애플리케이션이 어느 환경에서 실행되든 동일하게 동작하므로, 배포 과정에서의 환경 차이 문제를 해결할 수 있습니다.

- 컨테이너화: Docker 이미지는 개발 환경과 프로덕션 환경 간의 일관성을 보장합니다. Jenkins는 이 Docker 이미지를 빌드하고 테스트하며, 필요한 경우 새로운 버전을 배포합니다.
환경 간 이식성: Docker는 다양한 환경에서 애플리케이션을 실행할 수 있도록 해 주기 때문에, 로컬 개발 환경에서부터 AWS와 같은 클라우드 환경에 이르기까지 동일한 방식으로 실행됩니다.

3. AWS - 클라우드 기반 배포
**AWS (Amazon Web Services)**는 클라우드 기반에서 애플리케이션을 배포하고 운영할 수 있는 유연하고 강력한 서비스를 제공합니다. AWS는 여러 가지 서비스를 제공하지만, 그 중에서 EC2, ECS, EKS가 Docker 컨테이너와 함께 애플리케이션을 배포하는 데 주로 사용됩니다.

- EC2 (Elastic Compute Cloud): EC2 인스턴스를 사용하여 애플리케이션을 직접 배포할 수 있습니다. Docker 컨테이너를 EC2 인스턴스에서 실행하여, Jenkins에서 빌드된 이미지를 EC2로 배포할 수 있습니다.
- ECS (Elastic Container Service): ECS는 Docker 컨테이너를 쉽게 관리하고 배포할 수 있는 서비스로, Jenkins와 함께 사용할 수 있습니다. Jenkins는 Docker 이미지를 빌드하여 ECS 클러스터에 배포하는 작업을 자동화합니다.
- EKS (Elastic Kubernetes Service): Kubernetes 클러스터에서 컨테이너화된 애플리케이션을 관리할 수 있습니다. Jenkins와 EKS를 결합하여, 자동화된 CI/CD 파이프라인을 구축하고 Kubernetes 클러스터에서 애플리케이션을 배포할 수 있습니다.

이 세 가지를 결합하는 이유
- Jenkins, Docker, AWS를 결합하는 이유는 효율성, 확장성, 자동화를 크게 향상시키기 때문입니다. 각 도구는 특정 역할을 맡고 있으며, 함께 사용하면 더욱 강력한 배포 파이프라인을 구축할 수 있습니다.
- 자동화된 빌드, 테스트, 배포: Jenkins가 코드를 가져와 자동으로 빌드하고, Docker 이미지를 생성하고, 이를 AWS 환경에 배포하는 과정을 모두 자동화할 수 있습니다.
- 이식성과 일관성: Docker는 개발 환경과 배포 환경 간의 일관성을 보장합니다. Docker 이미지는 로컬 개발 환경과 AWS 클라우드 환경 모두에서 동일한 방식으로 실행됩니다.
- 스케일링: AWS는 EC2, ECS, EKS와 같은 서비스를 통해 애플리케이션을 수평적으로 확장할 수 있는 기능을 제공합니다. Jenkins는 코드 변경 사항에 따라 자동으로 배포할 수 있기 때문에, 트래픽 증가나 애플리케이션의 확장에 유연하게 대응할 수 있습니다.
- 컨테이너화된 배포의 효율성: Docker와 함께 Jenkins를 사용하면, 모든 배포가 컨테이너화되어 환경 설정이 간소화됩니다. Docker 이미지는 환경 설정을 코드로 관리할 수 있게 해줍니다.

### 가장 일반적인 배포 과정
Jenkins, Docker, AWS를 사용한 배포 과정은 다음과 같습니다:

1. 코드 푸시 (Git):

개발자가 Git 저장소에 코드를 푸시합니다.
Jenkins에서 빌드 및 테스트:

2. Jenkins는 Git에서 변경 사항을 감지하고 자동으로 빌드를 실행합니다.
Docker 이미지를 빌드하고, 필요한 경우 테스트를 실행합니다.
Docker 이미지 생성:

3. Jenkins는 Dockerfile을 기반으로 애플리케이션을 컨테이너화하여 Docker 이미지를 생성합니다.
생성된 이미지는 Docker Hub나 AWS ECR에 푸시됩니다.
AWS로 배포 (EC2, ECS, EKS):

4. Jenkins는 AWS EC2 인스턴스나 AWS ECS, EKS 클러스터에 Docker 이미지를 배포합니다.
ECS나 EKS를 사용할 경우, 컨테이너를 자동으로 배포하고 관리할 수 있습니다.
모니터링 및 롤백:

5. 배포가 완료되면, AWS CloudWatch를 통해 애플리케이션의 상태를 모니터링합니다.
문제가 발생할 경우, Jenkins를 통해 이전 버전으로 롤백할 수 있습니다.
결론
Jenkins, Docker, AWS를 결합한 배포 방식은 현재 가장 일반적이고 표준적인 배포 방법입니다. 이 방식은 자동화, 효율성, 유연성을 제공하며, 다양한 규모의 프로젝트와 인프라 환경에서 잘 작동합니다. 특히 CI/CD 파이프라인을 통한 자동화된 배포를 통해 코드 품질을 유지하고, 배포 주기를 단축시킬 수 있습니다.

다만, 특정 환경에 따라 서버리스나 Kubernetes와 같은 다른 방법들이 더 적합할 수 있습니다. 예를 들어, 서버리스 아키텍처를 선호하는 경우 AWS Lambda와 같은 솔루션을 사용할 수 있으며, 컨테이너 오케스트레이션이 필요한 경우 Kubernetes와 함께 Docker를 사용하여 배포할 수 있습니다.
